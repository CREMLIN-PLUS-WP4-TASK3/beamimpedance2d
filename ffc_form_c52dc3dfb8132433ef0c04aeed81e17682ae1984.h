// This code conforms with the UFC specification version 2.3.0
// and was automatically generated by FFC version 1.3.0.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   False
//   format:                         'ufc'
//   log_level:                      25
//   log_prefix:                     ''
//   name:                           'ffc'
//   no-evaluate_basis_derivatives:  True
//   optimize:                       False
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              -1
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   restrict_keyword:               ''
//   split:                          False

#ifndef __FFC_FORM_C52DC3DFB8132433EF0C04AEED81E17682AE1984_H
#define __FFC_FORM_C52DC3DFB8132433EF0C04AEED81E17682AE1984_H

#include <cmath>
#include <stdexcept>
#include <fstream>
#include <ufc.h>

/// This class defines the interface for a finite element.

class ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_0: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_0() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_0()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Discontinuous Lagrange', Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2), 0, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 1;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    
    // Get coordinates and map to the reference (FIAT) element
    
    // Reset values
    *values = 0.0;
    
    // Array of basisvalues
    double basisvalues[1] = {0.0};
    
    // Declare helper variables
    
    // Compute basisvalues
    basisvalues[0] = 1.0;
    
    // Table(s) of coefficients
    static const double coefficients0[1] = \
    {1.0};
    
    // Compute value(s)
    for (unsigned int r = 0; r < 1; r++)
    {
      *values += coefficients0[r]*basisvalues[r];
    }// end loop over 'r'
  }

  /// Evaluate all basis functions at given point x in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    // Element is constant, calling evaluate_basis.
    evaluate_basis(0, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    // Element is constant, calling evaluate_basis_derivatives.
    evaluate_basis_derivatives(0, n, values, x, vertex_coordinates, cell_orientation);
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
      y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    y[1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[0];
    vertex_values[2] = dof_values[0];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_0();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_1: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_1() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_1()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Nedelec 1st kind H(curl)', Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2), 1, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 3;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 2;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {-0.471404520791032, 0.0, -0.333333333333333};
      
      static const double coefficients1[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
        values[1] += coefficients1[r]*basisvalues[r];
      }// end loop over 'r'
      
      // Using covariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[0];
      const double tmp_ref1 = values[1];
      values[0] = (K[0]*tmp_ref0 + K[2]*tmp_ref1);
      values[1] = (K[1]*tmp_ref0 + K[3]*tmp_ref1);
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      static const double coefficients1[3] = \
      {0.942809041582063, -0.288675134594813, 0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
        values[1] += coefficients1[r]*basisvalues[r];
      }// end loop over 'r'
      
      // Using covariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[0];
      const double tmp_ref1 = values[1];
      values[0] = (K[0]*tmp_ref0 + K[2]*tmp_ref1);
      values[1] = (K[1]*tmp_ref0 + K[3]*tmp_ref1);
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.942809041582063, 0.0, -0.333333333333333};
      
      static const double coefficients1[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
        values[1] += coefficients1[r]*basisvalues[r];
      }// end loop over 'r'
      
      // Using covariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[0];
      const double tmp_ref1 = values[1];
      values[0] = (K[0]*tmp_ref0 + K[2]*tmp_ref1);
      values[1] = (K[1]*tmp_ref0 + K[3]*tmp_ref1);
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point x in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values[2] = {0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 2; s++)
      {
        values[r*2 + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 3; r++)
    {
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = 0.0;
      }// end loop over 's'
    }// end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[4];
    for (unsigned int r = 0; r < 4; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 2*num_derivatives; s++)
      {
        values[r*2*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    
    double result;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    switch (i)
    {
    case 0:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      result = (-1.0)*(J[0]*vals[0] + J[2]*vals[1]) + (J[1]*vals[0] + J[3]*vals[1]);
      return result;
        break;
      }
    case 1:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      result = (J[1]*vals[0] + J[3]*vals[1]);
      return result;
        break;
      }
    case 2:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      result = (J[0]*vals[0] + J[2]*vals[1]);
      return result;
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[2];
    
    // Declare variable for physical coordinates
    double y[2];
    
    double result;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    result = (-1.0)*(J[0]*vals[0] + J[2]*vals[1]) + (J[1]*vals[0] + J[3]*vals[1]);
    values[0] = result;
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    result = (J[1]*vals[0] + J[3]*vals[1]);
    values[1] = result;
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    result = (J[0]*vals[0] + J[2]*vals[1]);
    values[2] = result;
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Evaluate function and change variables
    vertex_values[0] = dof_values[1]*K[2] + dof_values[2]*K[0];
    vertex_values[2] = dof_values[0]*K[2] + dof_values[2]*(K[0] + K[2]);
    vertex_values[4] = dof_values[0]*(K[0]*(-1.0)) + dof_values[1]*(K[0] + K[2]);
    vertex_values[1] = dof_values[1]*K[3] + dof_values[2]*K[1];
    vertex_values[3] = dof_values[0]*K[3] + dof_values[2]*(K[1] + K[3]);
    vertex_values[5] = dof_values[0]*(K[1]*(-1.0)) + dof_values[1]*(K[1] + K[3]);
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_1();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_2: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_2() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_2()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "FiniteElement('Lagrange', Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2), 1, None)";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 3;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 0;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    return 1;
  }

  /// Evaluate basis function i at given point x in cell
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    *values = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        *values += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point x in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 3; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      }// end loop over 's'
    }// end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[2];
    for (unsigned int r = 0; r < 2; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 3; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 0;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_2();
  }

};

/// This class defines the interface for a finite element.

class ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_3: public ufc::finite_element
{
public:

  /// Constructor
  ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_3() : ufc::finite_element()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_3()
  {
    // Do nothing
  }

  /// Return a string identifying the finite element
  virtual const char* signature() const
  {
    return "MixedElement(*[FiniteElement('Nedelec 1st kind H(curl)', Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2), 1, None), FiniteElement('Nedelec 1st kind H(curl)', Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2), 1, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2), 1, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2), 1, None)], **{'value_shape': (6,) })";
  }

  /// Return the cell shape
  virtual ufc::shape cell_shape() const
  {
    return ufc::triangle;
  }

  /// Return the topological dimension of the cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the finite element function space
  virtual std::size_t space_dimension() const
  {
    return 12;
  }

  /// Return the rank of the value space
  virtual std::size_t value_rank() const
  {
    return 1;
  }

  /// Return the dimension of the value space for axis i
  virtual std::size_t value_dimension(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return 6;
        break;
      }
    }
    
    return 0;
  }

  /// Evaluate basis function i at given point x in cell
  virtual void evaluate_basis(std::size_t i,
                              double* values,
                              const double* x,
                              const double* vertex_coordinates,
                              int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    // Compute constants
    const double C0 = vertex_coordinates[2] + vertex_coordinates[4];
    const double C1 = vertex_coordinates[3] + vertex_coordinates[5];
    
    // Get coordinates and map to the reference (FIAT) element
    double X = (J[1]*(C1 - 2.0*x[1]) + J[3]*(2.0*x[0] - C0)) / detJ;
    double Y = (J[0]*(2.0*x[1] - C1) + J[2]*(C0 - 2.0*x[0])) / detJ;
    
    // Reset values
    values[0] = 0.0;
    values[1] = 0.0;
    values[2] = 0.0;
    values[3] = 0.0;
    values[4] = 0.0;
    values[5] = 0.0;
    switch (i)
    {
    case 0:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {-0.471404520791032, 0.0, -0.333333333333333};
      
      static const double coefficients1[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
        values[1] += coefficients1[r]*basisvalues[r];
      }// end loop over 'r'
      
      // Using covariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[0];
      const double tmp_ref1 = values[1];
      values[0] = (K[0]*tmp_ref0 + K[2]*tmp_ref1);
      values[1] = (K[1]*tmp_ref0 + K[3]*tmp_ref1);
        break;
      }
    case 1:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      static const double coefficients1[3] = \
      {0.942809041582063, -0.288675134594813, 0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
        values[1] += coefficients1[r]*basisvalues[r];
      }// end loop over 'r'
      
      // Using covariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[0];
      const double tmp_ref1 = values[1];
      values[0] = (K[0]*tmp_ref0 + K[2]*tmp_ref1);
      values[1] = (K[1]*tmp_ref0 + K[3]*tmp_ref1);
        break;
      }
    case 2:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.942809041582063, 0.0, -0.333333333333333};
      
      static const double coefficients1[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[0] += coefficients0[r]*basisvalues[r];
        values[1] += coefficients1[r]*basisvalues[r];
      }// end loop over 'r'
      
      // Using covariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[0];
      const double tmp_ref1 = values[1];
      values[0] = (K[0]*tmp_ref0 + K[2]*tmp_ref1);
      values[1] = (K[1]*tmp_ref0 + K[3]*tmp_ref1);
        break;
      }
    case 3:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {-0.471404520791032, 0.0, -0.333333333333333};
      
      static const double coefficients1[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
        values[3] += coefficients1[r]*basisvalues[r];
      }// end loop over 'r'
      
      // Using covariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[2];
      const double tmp_ref1 = values[3];
      values[2] = (K[0]*tmp_ref0 + K[2]*tmp_ref1);
      values[3] = (K[1]*tmp_ref0 + K[3]*tmp_ref1);
        break;
      }
    case 4:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      static const double coefficients1[3] = \
      {0.942809041582063, -0.288675134594813, 0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
        values[3] += coefficients1[r]*basisvalues[r];
      }// end loop over 'r'
      
      // Using covariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[2];
      const double tmp_ref1 = values[3];
      values[2] = (K[0]*tmp_ref0 + K[2]*tmp_ref1);
      values[3] = (K[1]*tmp_ref0 + K[3]*tmp_ref1);
        break;
      }
    case 5:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.942809041582063, 0.0, -0.333333333333333};
      
      static const double coefficients1[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[2] += coefficients0[r]*basisvalues[r];
        values[3] += coefficients1[r]*basisvalues[r];
      }// end loop over 'r'
      
      // Using covariant Piola transform to map values back to the physical element
      const double tmp_ref0 = values[2];
      const double tmp_ref1 = values[3];
      values[2] = (K[0]*tmp_ref0 + K[2]*tmp_ref1);
      values[3] = (K[1]*tmp_ref0 + K[3]*tmp_ref1);
        break;
      }
    case 6:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 7:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 8:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[4] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 9:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, -0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[5] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 10:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.288675134594813, -0.166666666666667};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[5] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    case 11:
      {
        
      // Array of basisvalues
      double basisvalues[3] = {0.0, 0.0, 0.0};
      
      // Declare helper variables
      double tmp0 = (1.0 + Y + 2.0*X)/2.0;
      
      // Compute basisvalues
      basisvalues[0] = 1.0;
      basisvalues[1] = tmp0;
      basisvalues[2] = basisvalues[0]*(0.5 + 1.5*Y);
      basisvalues[0] *= std::sqrt(0.5);
      basisvalues[2] *= std::sqrt(1.0);
      basisvalues[1] *= std::sqrt(3.0);
      
      // Table(s) of coefficients
      static const double coefficients0[3] = \
      {0.471404520791032, 0.0, 0.333333333333333};
      
      // Compute value(s)
      for (unsigned int r = 0; r < 3; r++)
      {
        values[5] += coefficients0[r]*basisvalues[r];
      }// end loop over 'r'
        break;
      }
    }
    
  }

  /// Evaluate all basis functions at given point x in cell
  virtual void evaluate_basis_all(double* values,
                                  const double* x,
                                  const double* vertex_coordinates,
                                  int cell_orientation) const
  {
    // Helper variable to hold values of a single dof.
    double dof_values[6] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0};
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis(r, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 6; s++)
      {
        values[r*6 + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
  }

  /// Evaluate order n derivatives of basis function i at given point x in cell
  virtual void evaluate_basis_derivatives(std::size_t i,
                                          std::size_t n,
                                          double* values,
                                          const double* x,
                                          const double* vertex_coordinates,
                                          int cell_orientation) const
  {
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
  }

  /// Evaluate order n derivatives of all basis functions at given point x in cell
  virtual void evaluate_basis_derivatives_all(std::size_t n,
                                              double* values,
                                              const double* x,
                                              const double* vertex_coordinates,
                                              int cell_orientation) const
  {
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    }// end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 12; r++)
    {
      for (unsigned int s = 0; s < 6*num_derivatives; s++)
      {
        values[r*6*num_derivatives + s] = 0.0;
      }// end loop over 's'
    }// end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 1)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[12];
    for (unsigned int r = 0; r < 12; r++)
    {
      dof_values[r] = 0.0;
    }// end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 12; r++)
    {
      evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < 6*num_derivatives; s++)
      {
        values[r*6*num_derivatives + s] = dof_values[s];
      }// end loop over 's'
    }// end loop over 'r'
  }

  /// Evaluate linear functional for dof i on the function f
  virtual double evaluate_dof(std::size_t i,
                              const ufc::function& f,
                              const double* vertex_coordinates,
                              int cell_orientation,
                              const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[6];
    
    // Declare variable for physical coordinates
    double y[2];
    
    double result;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    switch (i)
    {
    case 0:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      result = (-1.0)*(J[0]*vals[0] + J[2]*vals[1]) + (J[1]*vals[0] + J[3]*vals[1]);
      return result;
        break;
      }
    case 1:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      result = (J[1]*vals[0] + J[3]*vals[1]);
      return result;
        break;
      }
    case 2:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      result = (J[0]*vals[0] + J[2]*vals[1]);
      return result;
        break;
      }
    case 3:
      {
        y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      result = (-1.0)*(J[0]*vals[2] + J[2]*vals[3]) + (J[1]*vals[2] + J[3]*vals[3]);
      return result;
        break;
      }
    case 4:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      result = (J[1]*vals[2] + J[3]*vals[3]);
      return result;
        break;
      }
    case 5:
      {
        y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
      y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      result = (J[0]*vals[2] + J[2]*vals[3]);
      return result;
        break;
      }
    case 6:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 7:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 8:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[4];
        break;
      }
    case 9:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[5];
        break;
      }
    case 10:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[5];
        break;
      }
    case 11:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[5];
        break;
      }
    }
    
    return 0.0;
  }

  /// Evaluate linear functionals for all dofs on the function f
  virtual void evaluate_dofs(double* values,
                             const ufc::function& f,
                             const double* vertex_coordinates,
                             int cell_orientation,
                             const ufc::cell& c) const
  {
    // Declare variables for result of evaluation
    double vals[6];
    
    // Declare variable for physical coordinates
    double y[2];
    
    double result;
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    result = (-1.0)*(J[0]*vals[0] + J[2]*vals[1]) + (J[1]*vals[0] + J[3]*vals[1]);
    values[0] = result;
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    result = (J[1]*vals[0] + J[3]*vals[1]);
    values[1] = result;
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    result = (J[0]*vals[0] + J[2]*vals[1]);
    values[2] = result;
    y[0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    result = (-1.0)*(J[0]*vals[2] + J[2]*vals[3]) + (J[1]*vals[2] + J[3]*vals[3]);
    values[3] = result;
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    result = (J[1]*vals[2] + J[3]*vals[3]);
    values[4] = result;
    y[0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    y[1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    result = (J[0]*vals[2] + J[2]*vals[3]);
    values[5] = result;
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[6] = vals[4];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[7] = vals[4];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[8] = vals[4];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[9] = vals[5];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[10] = vals[5];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[11] = vals[5];
  }

  /// Interpolate vertex values from dof values
  virtual void interpolate_vertex_values(double* vertex_values,
                                         const double* dof_values,
                                         const double* vertex_coordinates,
                                         int cell_orientation,
                                         const ufc::cell& c) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Evaluate function and change variables
    vertex_values[0] = dof_values[1]*K[2] + dof_values[2]*K[0];
    vertex_values[6] = dof_values[0]*K[2] + dof_values[2]*(K[0] + K[2]);
    vertex_values[12] = dof_values[0]*(K[0]*(-1.0)) + dof_values[1]*(K[0] + K[2]);
    vertex_values[1] = dof_values[1]*K[3] + dof_values[2]*K[1];
    vertex_values[7] = dof_values[0]*K[3] + dof_values[2]*(K[1] + K[3]);
    vertex_values[13] = dof_values[0]*(K[1]*(-1.0)) + dof_values[1]*(K[1] + K[3]);
    // Evaluate function and change variables
    vertex_values[2] = dof_values[4]*K[2] + dof_values[5]*K[0];
    vertex_values[8] = dof_values[3]*K[2] + dof_values[5]*(K[0] + K[2]);
    vertex_values[14] = dof_values[3]*(K[0]*(-1.0)) + dof_values[4]*(K[0] + K[2]);
    vertex_values[3] = dof_values[4]*K[3] + dof_values[5]*K[1];
    vertex_values[9] = dof_values[3]*K[3] + dof_values[5]*(K[1] + K[3]);
    vertex_values[15] = dof_values[3]*(K[1]*(-1.0)) + dof_values[4]*(K[1] + K[3]);
    // Evaluate function and change variables
    vertex_values[4] = dof_values[6];
    vertex_values[10] = dof_values[7];
    vertex_values[16] = dof_values[8];
    // Evaluate function and change variables
    vertex_values[5] = dof_values[9];
    vertex_values[11] = dof_values[10];
    vertex_values[17] = dof_values[11];
  }

  /// Map coordinate xhat from reference cell to coordinate x in cell
  virtual void map_from_reference_cell(double* x,
                                       const double* xhat,
                                       const ufc::cell& c) const
  {
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
  }

  /// Map from coordinate x in cell to coordinate xhat in reference cell
  virtual void map_to_reference_cell(double* xhat,
                                     const double* x,
                                     const ufc::cell& c) const
  {
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
  }

  /// Return the number of sub elements (for a mixed element)
  virtual std::size_t num_sub_elements() const
  {
    return 4;
  }

  /// Create a new finite element for sub element i (for a mixed element)
  virtual ufc::finite_element* create_sub_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_1();
        break;
      }
    case 1:
      {
        return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_1();
        break;
      }
    case 2:
      {
        return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_2();
        break;
      }
    case 3:
      {
        return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_2();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::finite_element* create() const
  {
    return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_3();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_0: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_0() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_0()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Discontinuous Lagrange', Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2), 0, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[2];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t local_dimension() const
  {
    return 1;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 0;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 1;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[2][0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 0;
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0][0] = 0.333333333333333*vertex_coordinates[0] + 0.333333333333333*vertex_coordinates[2] + 0.333333333333333*vertex_coordinates[4];
    dof_coordinates[0][1] = 0.333333333333333*vertex_coordinates[1] + 0.333333333333333*vertex_coordinates[3] + 0.333333333333333*vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_0();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_1: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_1() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_1()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Nedelec 1st kind H(curl)', Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2), 1, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return false;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[1];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t local_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 1;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 0;
        break;
      }
    case 1:
      {
        return 1;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[1][0];
    dofs[1] = c.entity_indices[1][1];
    dofs[2] = c.entity_indices[1][2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 0;
        break;
      }
    case 1:
      {
        dofs[0] = 1;
        break;
      }
    case 2:
      {
        dofs[0] = 2;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0][0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[0][1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[1][0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[1][1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[2][0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[2][1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_1();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_2: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_2() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_2()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2), 1, None)";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return false;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return num_global_entities[0];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t local_dimension() const
  {
    return 3;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 2;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 0;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    dofs[0] = c.entity_indices[0][0];
    dofs[1] = c.entity_indices[0][1];
    dofs[2] = c.entity_indices[0][2];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0][0] = vertex_coordinates[0];
    dof_coordinates[0][1] = vertex_coordinates[1];
    dof_coordinates[1][0] = vertex_coordinates[2];
    dof_coordinates[1][1] = vertex_coordinates[3];
    dof_coordinates[2][0] = vertex_coordinates[4];
    dof_coordinates[2][1] = vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 0;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_2();
  }

};

/// This class defines the interface for a local-to-global mapping of
/// degrees of freedom (dofs).

class ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_3: public ufc::dofmap
{
public:

  /// Constructor
  ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_3() : ufc::dofmap()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_3()
  {
    // Do nothing
  }

  /// Return a string identifying the dofmap
  virtual const char* signature() const
  {
    return "FFC dofmap for MixedElement(*[FiniteElement('Nedelec 1st kind H(curl)', Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2), 1, None), FiniteElement('Nedelec 1st kind H(curl)', Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2), 1, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2), 1, None), FiniteElement('Lagrange', Domain(Cell('triangle', 2), 'triangle_multiverse', 2, 2), 1, None)], **{'value_shape': (6,) })";
  }

  /// Return true iff mesh entities of topological dimension d are needed
  virtual bool needs_mesh_entities(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return false;
        break;
      }
    }
    
    return false;
  }

  /// Return the topological dimension of the associated cell shape
  virtual std::size_t topological_dimension() const
  {
    return 2;
  }

  /// Return the geometric dimension of the associated cell shape
  virtual std::size_t geometric_dimension() const
  {
    return 2;
  }

  /// Return the dimension of the global finite element function space
  virtual std::size_t global_dimension(const std::vector<std::size_t>&
                                       num_global_entities) const
  {
    return 2*num_global_entities[0] + 2*num_global_entities[1];
  }

  /// Return the dimension of the local finite element function space for a cell
  virtual std::size_t local_dimension() const
  {
    return 12;
  }

  /// Return the number of dofs on each cell facet
  virtual std::size_t num_facet_dofs() const
  {
    return 6;
  }

  /// Return the number of dofs associated with each cell entity of dimension d
  virtual std::size_t num_entity_dofs(std::size_t d) const
  {
    switch (d)
    {
    case 0:
      {
        return 2;
        break;
      }
    case 1:
      {
        return 2;
        break;
      }
    case 2:
      {
        return 0;
        break;
      }
    }
    
    return 0;
  }

  /// Tabulate the local-to-global mapping of dofs on a cell
  virtual void tabulate_dofs(std::size_t* dofs,
                             const std::vector<std::size_t>& num_global_entities,
                             const ufc::cell& c) const
  {
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[1][0];
    dofs[1] = offset + c.entity_indices[1][1];
    dofs[2] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[3] = offset + c.entity_indices[1][0];
    dofs[4] = offset + c.entity_indices[1][1];
    dofs[5] = offset + c.entity_indices[1][2];
    offset += num_global_entities[1];
    dofs[6] = offset + c.entity_indices[0][0];
    dofs[7] = offset + c.entity_indices[0][1];
    dofs[8] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[9] = offset + c.entity_indices[0][0];
    dofs[10] = offset + c.entity_indices[0][1];
    dofs[11] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
  }

  /// Tabulate the local-to-local mapping from facet dofs to cell dofs
  virtual void tabulate_facet_dofs(std::size_t* dofs,
                                   std::size_t facet) const
  {
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 0;
      dofs[1] = 3;
      dofs[2] = 7;
      dofs[3] = 8;
      dofs[4] = 10;
      dofs[5] = 11;
        break;
      }
    case 1:
      {
        dofs[0] = 1;
      dofs[1] = 4;
      dofs[2] = 6;
      dofs[3] = 8;
      dofs[4] = 9;
      dofs[5] = 11;
        break;
      }
    case 2:
      {
        dofs[0] = 2;
      dofs[1] = 5;
      dofs[2] = 6;
      dofs[3] = 7;
      dofs[4] = 9;
      dofs[5] = 10;
        break;
      }
    }
    
  }

  /// Tabulate the local-to-local mapping of dofs on entity (d, i)
  virtual void tabulate_entity_dofs(std::size_t* dofs,
                                    std::size_t d, std::size_t i) const
  {
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 6;
        dofs[1] = 9;
          break;
        }
      case 1:
        {
          dofs[0] = 7;
        dofs[1] = 10;
          break;
        }
      case 2:
        {
          dofs[0] = 8;
        dofs[1] = 11;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
        dofs[1] = 3;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
        dofs[1] = 4;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
        dofs[1] = 5;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        
        break;
      }
    }
    
  }

  /// Tabulate the coordinates of all dofs on a cell
  virtual void tabulate_coordinates(double** dof_coordinates,
                                    const double* vertex_coordinates) const
  {
    dof_coordinates[0][0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[0][1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[1][0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[1][1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[2][0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[2][1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[3][0] = 0.5*vertex_coordinates[2] + 0.5*vertex_coordinates[4];
    dof_coordinates[3][1] = 0.5*vertex_coordinates[3] + 0.5*vertex_coordinates[5];
    dof_coordinates[4][0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[4];
    dof_coordinates[4][1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[5];
    dof_coordinates[5][0] = 0.5*vertex_coordinates[0] + 0.5*vertex_coordinates[2];
    dof_coordinates[5][1] = 0.5*vertex_coordinates[1] + 0.5*vertex_coordinates[3];
    dof_coordinates[6][0] = vertex_coordinates[0];
    dof_coordinates[6][1] = vertex_coordinates[1];
    dof_coordinates[7][0] = vertex_coordinates[2];
    dof_coordinates[7][1] = vertex_coordinates[3];
    dof_coordinates[8][0] = vertex_coordinates[4];
    dof_coordinates[8][1] = vertex_coordinates[5];
    dof_coordinates[9][0] = vertex_coordinates[0];
    dof_coordinates[9][1] = vertex_coordinates[1];
    dof_coordinates[10][0] = vertex_coordinates[2];
    dof_coordinates[10][1] = vertex_coordinates[3];
    dof_coordinates[11][0] = vertex_coordinates[4];
    dof_coordinates[11][1] = vertex_coordinates[5];
  }

  /// Return the number of sub dofmaps (for a mixed element)
  virtual std::size_t num_sub_dofmaps() const
  {
    return 4;
  }

  /// Create a new dofmap for sub dofmap i (for a mixed element)
  virtual ufc::dofmap* create_sub_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_1();
        break;
      }
    case 1:
      {
        return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_1();
        break;
      }
    case 2:
      {
        return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_2();
        break;
      }
    case 3:
      {
        return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_2();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new class instance
  virtual ufc::dofmap* create() const
  {
    return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_3();
  }

};

/// This class defines the interface for the tabulation of the cell
/// tensor corresponding to the local contribution to a form from
/// the integral over a cell.

class ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_cell_integral_0_0: public ufc::cell_integral
{
public:

  /// Constructor
  ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_cell_integral_0_0() : ufc::cell_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_cell_integral_0_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local cell
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               int cell_orientation) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Cell volume
    
    // Compute circumradius of triangle in 2D
    
    
    // Array of quadrature weights.
    static const double W3[3] = {0.166666666666667, 0.166666666666667, 0.166666666666667};
    // Quadrature points on the UFC reference element: (0.166666666666667, 0.166666666666667), (0.166666666666667, 0.666666666666667), (0.666666666666667, 0.166666666666667)
    
    // Value of basis functions at quadrature points.
    static const double FE0[3][1] = \
    {{1.0},
    {1.0},
    {1.0}};
    
    static const double FE1_C0[3][12] = \
    {{-0.166666666666667, 0.166666666666667, 0.833333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.666666666666667, 0.666666666666667, 0.333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.166666666666667, 0.166666666666667, 0.833333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C0_D01[3][12] = \
    {{-1.0, 1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-1.0, 1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C0_D10[3][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C1[3][12] = \
    {{0.166666666666666, 0.833333333333333, 0.166666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.166666666666667, 0.833333333333333, 0.166666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.666666666666666, 0.333333333333333, 0.666666666666666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C1_D10[3][12] = \
    {{1.0, -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {1.0, -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {1.0, -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C2[3][12] = \
    {{0.0, 0.0, 0.0, -0.166666666666667, 0.166666666666667, 0.833333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.666666666666667, 0.666666666666667, 0.333333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.166666666666667, 0.166666666666667, 0.833333333333333, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C2_D01[3][12] = \
    {{0.0, 0.0, 0.0, -1.0, 1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -1.0, 1.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C3[3][12] = \
    {{0.0, 0.0, 0.0, 0.166666666666666, 0.833333333333333, 0.166666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.166666666666667, 0.833333333333333, 0.166666666666667, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.666666666666666, 0.333333333333333, 0.666666666666666, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C3_D10[3][12] = \
    {{0.0, 0.0, 0.0, 1.0, -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 1.0, -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 1.0, -1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C4[3][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.666666666666667, 0.166666666666667, 0.166666666666667, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.166666666666667, 0.666666666666667, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.666666666666667, 0.166666666666667, 0.0, 0.0, 0.0}};
    
    static const double FE1_C4_D01[3][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C4_D10[3][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE1_C5[3][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.666666666666667, 0.166666666666667, 0.166666666666667},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.166666666666667, 0.666666666666667},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.166666666666667, 0.666666666666667, 0.166666666666667}};
    
    static const double FE1_C5_D01[3][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 1.0}};
    
    static const double FE1_C5_D10[3][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 1.0, 0.0}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 144; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    
    // Loop quadrature points for integral.
    // Number of operations to compute element tensor for following IP loop = 275208
    for (unsigned int ip = 0; ip < 3; ip++)
    {
      
      // Coefficient declarations.
      double F0 = 0.0;
      double F1 = 0.0;
      double F2 = 0.0;
      double F3 = 0.0;
      
      // Total number of operations to compute function values = 8
      for (unsigned int r = 0; r < 1; r++)
      {
        F0 += FE0[ip][0]*w[3][0];
        F1 += FE0[ip][0]*w[2][0];
        F2 += FE0[ip][0]*w[1][0];
        F3 += FE0[ip][0]*w[0][0];
      }// end loop over 'r'
      
      // Number of operations for primary indices: 91728
      for (unsigned int j = 0; j < 12; j++)
      {
        for (unsigned int k = 0; k < 12; k++)
        {
          // Number of operations to compute entry: 637
          A[j*12 + k] += ((((((K[0]*K[1]*FE1_C0_D10[ip][k] + K[0]*K[3]*FE1_C3_D10[ip][k] + K[2]*K[1]*FE1_C2_D01[ip][k] + K[2]*K[3]*FE1_C0_D10[ip][k]) + ((K[1]*K[0]*FE1_C0_D10[ip][k] + K[1]*K[2]*FE1_C3_D10[ip][k] + K[3]*K[0]*FE1_C2_D01[ip][k] + K[3]*K[2]*FE1_C0_D10[ip][k]))*(-1.0)))*F1)*((((K[1]*K[0]*FE1_C0_D10[ip][j] + K[1]*K[2]*FE1_C3_D10[ip][j] + K[3]*K[0]*FE1_C2_D01[ip][j] + K[3]*K[2]*FE1_C0_D10[ip][j]))*(-1.0) + (K[0]*K[1]*FE1_C0_D10[ip][j] + K[0]*K[3]*FE1_C3_D10[ip][j] + K[2]*K[1]*FE1_C2_D01[ip][j] + K[2]*K[3]*FE1_C0_D10[ip][j]))) + (((((K[0]*K[1]*FE1_C0_D10[ip][k] + K[0]*K[3]*FE1_C1_D10[ip][k] + K[2]*K[1]*FE1_C0_D01[ip][k] + K[2]*K[3]*FE1_C0_D10[ip][k]) + ((K[1]*K[0]*FE1_C0_D10[ip][k] + K[1]*K[2]*FE1_C1_D10[ip][k] + K[3]*K[0]*FE1_C0_D01[ip][k] + K[3]*K[2]*FE1_C0_D10[ip][k]))*(-1.0)))*F1)*(((K[0]*K[1]*FE1_C0_D10[ip][j] + K[0]*K[3]*FE1_C1_D10[ip][j] + K[2]*K[1]*FE1_C0_D01[ip][j] + K[2]*K[3]*FE1_C0_D10[ip][j]) + ((K[1]*K[0]*FE1_C0_D10[ip][j] + K[1]*K[2]*FE1_C1_D10[ip][j] + K[3]*K[0]*FE1_C0_D01[ip][j] + K[3]*K[2]*FE1_C0_D10[ip][j]))*(-1.0))) + ((((((K[0]*K[1]*FE1_C0_D10[ip][k] + K[0]*K[3]*FE1_C3_D10[ip][k] + K[2]*K[1]*FE1_C2_D01[ip][k] + K[2]*K[3]*FE1_C0_D10[ip][k]) + ((K[1]*K[0]*FE1_C0_D10[ip][k] + K[1]*K[2]*FE1_C3_D10[ip][k] + K[3]*K[0]*FE1_C2_D01[ip][k] + K[3]*K[2]*FE1_C0_D10[ip][k]))*(-1.0)))*F0)*(((K[0]*K[1]*FE1_C0_D10[ip][j] + K[0]*K[3]*FE1_C1_D10[ip][j] + K[2]*K[1]*FE1_C0_D01[ip][j] + K[2]*K[3]*FE1_C0_D10[ip][j]) + ((K[1]*K[0]*FE1_C0_D10[ip][j] + K[1]*K[2]*FE1_C1_D10[ip][j] + K[3]*K[0]*FE1_C0_D01[ip][j] + K[3]*K[2]*FE1_C0_D10[ip][j]))*(-1.0))))*(-1.0) + (((((((K[0]*FE1_C2[ip][k] + K[2]*FE1_C3[ip][k]))*((-439.256635779667)*F1))*((K[0]*FE1_C2[ip][j] + K[2]*FE1_C3[ip][j])) + (((K[1]*FE1_C2[ip][k] + K[3]*FE1_C3[ip][k]))*((-439.256635779667)*F1))*((K[1]*FE1_C2[ip][j] + K[3]*FE1_C3[ip][j]))))*(-1.0) + (((((((K[1]*FE1_C0[ip][k] + K[3]*FE1_C1[ip][k]))*((-439.256635779667)*F1))*((K[1]*FE1_C0[ip][j] + K[3]*FE1_C1[ip][j])) + (((K[0]*FE1_C0[ip][k] + K[2]*FE1_C1[ip][k]))*((-439.256635779667)*F1))*((K[0]*FE1_C0[ip][j] + K[2]*FE1_C1[ip][j]))))*(-1.0) + (((((((K[0]*FE1_C2[ip][k] + K[2]*FE1_C3[ip][k]))*(-20.9584502237085))*F0)*(((K[0]*FE1_C5_D10[ip][j] + K[2]*FE1_C5_D01[ip][j]))*(-1.0)) + ((((K[1]*FE1_C2[ip][k] + K[3]*FE1_C3[ip][k]))*20.9584502237085)*F0)*((K[1]*FE1_C5_D10[ip][j] + K[3]*FE1_C5_D01[ip][j]))))*(-1.0) + (((((((K[1]*FE1_C0[ip][k] + K[3]*FE1_C1[ip][k]))*20.9584502237085)*F0)*((K[1]*FE1_C4_D10[ip][j] + K[3]*FE1_C4_D01[ip][j])) + ((((K[0]*FE1_C0[ip][k] + K[2]*FE1_C1[ip][k]))*(-20.9584502237085))*F0)*(((K[0]*FE1_C4_D10[ip][j] + K[2]*FE1_C4_D01[ip][j]))*(-1.0))))*(-1.0) + ((((((((K[0]*FE1_C4_D10[ip][k] + K[2]*FE1_C4_D01[ip][k]))*(-20.9584502237085))*F0)*((K[0]*FE1_C0[ip][j] + K[2]*FE1_C1[ip][j])) + ((((K[1]*FE1_C4_D10[ip][k] + K[3]*FE1_C4_D01[ip][k]))*(-20.9584502237085))*F0)*((K[1]*FE1_C0[ip][j] + K[3]*FE1_C1[ip][j]))))*(-1.0) + (((((((K[0]*FE1_C5_D10[ip][k] + K[2]*FE1_C5_D01[ip][k]))*(-1.0))*F0)*(((K[0]*FE1_C4_D10[ip][j] + K[2]*FE1_C4_D01[ip][j]))*(-1.0)) + (((K[1]*FE1_C5_D10[ip][k] + K[3]*FE1_C5_D01[ip][k]))*F0)*((K[1]*FE1_C4_D10[ip][j] + K[3]*FE1_C4_D01[ip][j]))))*(-1.0) + ((((((((K[1]*FE1_C5_D10[ip][k] + K[3]*FE1_C5_D01[ip][k]))*(-20.9584502237085))*F1)*((K[1]*FE1_C0[ip][j] + K[3]*FE1_C1[ip][j])) + ((((K[0]*FE1_C5_D10[ip][k] + K[2]*FE1_C5_D01[ip][k]))*(-20.9584502237085))*F1)*((K[0]*FE1_C0[ip][j] + K[2]*FE1_C1[ip][j]))))*(-1.0) + ((FE1_C4[ip][j]*FE1_C5[ip][k]*F2*(-1.0))*6283185307.17959 + (((((((K[0]*FE1_C2[ip][k] + K[2]*FE1_C3[ip][k]))*F2)*((K[0]*FE1_C0[ip][j] + K[2]*FE1_C1[ip][j])) + (((K[1]*FE1_C2[ip][k] + K[3]*FE1_C3[ip][k]))*F2)*((K[1]*FE1_C0[ip][j] + K[3]*FE1_C1[ip][j]))))*(-1.0))*6283185307.17959 + (FE1_C5[ip][j]*FE1_C4[ip][k]*F2*6283185307.17959 + ((((((K[1]*FE1_C0[ip][k] + K[3]*FE1_C1[ip][k]))*F2)*((K[1]*FE1_C2[ip][j] + K[3]*FE1_C3[ip][j])) + (((K[0]*FE1_C0[ip][k] + K[2]*FE1_C1[ip][k]))*F2)*((K[0]*FE1_C2[ip][j] + K[2]*FE1_C3[ip][j]))))*6283185307.17959 + (FE1_C5[ip][j]*FE1_C5[ip][k]*F3*(-39478417604357431296.0) + (FE1_C4[ip][j]*FE1_C4[ip][k]*F3*(-39478417604357431296.0) + (((((((K[1]*FE1_C4_D10[ip][k] + K[3]*FE1_C4_D01[ip][k]))*F0)*((K[1]*FE1_C5_D10[ip][j] + K[3]*FE1_C5_D01[ip][j])) + ((((K[0]*FE1_C4_D10[ip][k] + K[2]*FE1_C4_D01[ip][k]))*(-1.0))*F0)*(((K[0]*FE1_C5_D10[ip][j] + K[2]*FE1_C5_D01[ip][j]))*(-1.0))) + ((((((K[1]*FE1_C0[ip][k] + K[3]*FE1_C1[ip][k]))*20.9584502237085)*F1)*((K[1]*FE1_C5_D10[ip][j] + K[3]*FE1_C5_D01[ip][j])) + ((((K[0]*FE1_C0[ip][k] + K[2]*FE1_C1[ip][k]))*(-20.9584502237085))*F1)*(((K[0]*FE1_C5_D10[ip][j] + K[2]*FE1_C5_D01[ip][j]))*(-1.0))) + ((((((K[1]*FE1_C4_D10[ip][k] + K[3]*FE1_C4_D01[ip][k]))*(-20.9584502237085))*F1)*((K[1]*FE1_C2[ip][j] + K[3]*FE1_C3[ip][j])) + ((((K[0]*FE1_C4_D10[ip][k] + K[2]*FE1_C4_D01[ip][k]))*(-20.9584502237085))*F1)*((K[0]*FE1_C2[ip][j] + K[2]*FE1_C3[ip][j]))) + (((((K[1]*FE1_C5_D10[ip][k] + K[3]*FE1_C5_D01[ip][k]))*F1)*((K[1]*FE1_C5_D10[ip][j] + K[3]*FE1_C5_D01[ip][j])) + ((((K[0]*FE1_C5_D10[ip][k] + K[2]*FE1_C5_D01[ip][k]))*(-1.0))*F1)*(((K[0]*FE1_C5_D10[ip][j] + K[2]*FE1_C5_D01[ip][j]))*(-1.0))) + ((((K[1]*FE1_C4_D10[ip][k] + K[3]*FE1_C4_D01[ip][k]))*F1)*((K[1]*FE1_C4_D10[ip][j] + K[3]*FE1_C4_D01[ip][j])) + ((((K[0]*FE1_C4_D10[ip][k] + K[2]*FE1_C4_D01[ip][k]))*(-1.0))*F1)*(((K[0]*FE1_C4_D10[ip][j] + K[2]*FE1_C4_D01[ip][j]))*(-1.0))))))) + (((((K[0]*FE1_C0[ip][k] + K[2]*FE1_C1[ip][k]))*F3)*((K[0]*FE1_C0[ip][j] + K[2]*FE1_C1[ip][j])) + (((K[1]*FE1_C0[ip][k] + K[3]*FE1_C1[ip][k]))*F3)*((K[1]*FE1_C0[ip][j] + K[3]*FE1_C1[ip][j]))))*(-39478417604357431296.0)) + (((((K[1]*FE1_C2[ip][k] + K[3]*FE1_C3[ip][k]))*F3)*((K[1]*FE1_C2[ip][j] + K[3]*FE1_C3[ip][j])) + (((K[0]*FE1_C2[ip][k] + K[2]*FE1_C3[ip][k]))*F3)*((K[0]*FE1_C2[ip][j] + K[2]*FE1_C3[ip][j]))))*(-39478417604357431296.0))))))))) + ((((((K[1]*FE1_C2[ip][k] + K[3]*FE1_C3[ip][k]))*20.9584502237085)*F1)*((K[1]*FE1_C4_D10[ip][j] + K[3]*FE1_C4_D01[ip][j])) + ((((K[0]*FE1_C2[ip][k] + K[2]*FE1_C3[ip][k]))*(-20.9584502237085))*F1)*(((K[0]*FE1_C4_D10[ip][j] + K[2]*FE1_C4_D01[ip][j]))*(-1.0))))*(-1.0)))) + ((((((K[0]*FE1_C5_D10[ip][k] + K[2]*FE1_C5_D01[ip][k]))*(-20.9584502237085))*F0)*((K[0]*FE1_C2[ip][j] + K[2]*FE1_C3[ip][j])) + ((((K[1]*FE1_C5_D10[ip][k] + K[3]*FE1_C5_D01[ip][k]))*(-20.9584502237085))*F0)*((K[1]*FE1_C2[ip][j] + K[3]*FE1_C3[ip][j]))))*(-1.0))))) + (((((K[0]*FE1_C0[ip][k] + K[2]*FE1_C1[ip][k]))*((-439.256635779667)*F0))*((K[0]*FE1_C2[ip][j] + K[2]*FE1_C3[ip][j])) + (((K[1]*FE1_C0[ip][k] + K[3]*FE1_C1[ip][k]))*((-439.256635779667)*F0))*((K[1]*FE1_C2[ip][j] + K[3]*FE1_C3[ip][j]))))*(-1.0))) + ((((((K[0]*FE1_C2[ip][k] + K[2]*FE1_C3[ip][k]))*((-439.256635779667)*F0))*((K[0]*FE1_C0[ip][j] + K[2]*FE1_C1[ip][j])) + (((K[1]*FE1_C2[ip][k] + K[3]*FE1_C3[ip][k]))*((-439.256635779667)*F0))*((K[1]*FE1_C0[ip][j] + K[3]*FE1_C1[ip][j]))))*(-1.0))*(-1.0))))) + ((((K[0]*K[1]*FE1_C0_D10[ip][k] + K[0]*K[3]*FE1_C1_D10[ip][k] + K[2]*K[1]*FE1_C0_D01[ip][k] + K[2]*K[3]*FE1_C0_D10[ip][k]) + ((K[1]*K[0]*FE1_C0_D10[ip][k] + K[1]*K[2]*FE1_C1_D10[ip][k] + K[3]*K[0]*FE1_C0_D01[ip][k] + K[3]*K[2]*FE1_C0_D10[ip][k]))*(-1.0)))*F0)*((((K[1]*K[0]*FE1_C0_D10[ip][j] + K[1]*K[2]*FE1_C3_D10[ip][j] + K[3]*K[0]*FE1_C2_D01[ip][j] + K[3]*K[2]*FE1_C0_D10[ip][j]))*(-1.0) + (K[0]*K[1]*FE1_C0_D10[ip][j] + K[0]*K[3]*FE1_C3_D10[ip][j] + K[2]*K[1]*FE1_C2_D01[ip][j] + K[2]*K[3]*FE1_C0_D10[ip][j]))))*W3[ip]*det;
        }// end loop over 'k'
      }// end loop over 'j'
    }// end loop over 'ip'
  }

};

/// This class defines the interface for the tabulation of the
/// exterior facet tensor corresponding to the local contribution to
/// a form from the integral over an exterior facet.

class ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_exterior_facet_integral_0_0: public ufc::exterior_facet_integral
{
public:

  /// Constructor
  ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_exterior_facet_integral_0_0() : ufc::exterior_facet_integral()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_exterior_facet_integral_0_0()
  {
    // Do nothing
  }

  /// Tabulate the tensor for the contribution from a local exterior facet
  virtual void tabulate_tensor(double*  A,
                               const double * const *  w,
                               const double*  vertex_coordinates,
                               std::size_t facet) const
  {
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    
    
    // Get vertices on edge
    static unsigned int edge_vertices[3][2] = {{1, 2}, {0, 2}, {0, 1}};
    const unsigned int v0 = edge_vertices[facet][0];
    const unsigned int v1 = edge_vertices[facet][1];
    
    // Compute scale factor (length of edge scaled by length of reference interval)
    const double dx0 = vertex_coordinates[2*v1 + 0] - vertex_coordinates[2*v0 + 0];
    const double dx1 = vertex_coordinates[2*v1 + 1] - vertex_coordinates[2*v0 + 1];
    const double det = std::sqrt(dx0*dx0 + dx1*dx1);
    
    
    const bool direction = dx1*(vertex_coordinates[2*facet] - vertex_coordinates[2*v0]) - dx0*(vertex_coordinates[2*facet + 1] - vertex_coordinates[2*v0 + 1]) < 0;
    // Compute facet normals from the facet scale factor constants
    const double n0 = direction ? dx1 / det : -dx1 / det;
    const double n1 = direction ? -dx0 / det : dx0 / det;
    
    // Facet area
    
    // Cell volume
    
    // Compute circumradius of triangle in 2D
    
    
    // Array of quadrature weights.
    static const double W2[2] = {0.5, 0.5};
    // Quadrature points on the UFC reference element: (0.211324865405187), (0.788675134594813)
    
    // Value of basis functions at quadrature points.
    static const double FE0_f0_C0[2][12] = \
    {{-0.211324865405187, 0.211324865405187, 0.788675134594813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {-0.788675134594813, 0.788675134594813, 0.211324865405187, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f0_C1[2][12] = \
    {{0.788675134594813, 0.211324865405187, 0.788675134594813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.211324865405187, 0.788675134594813, 0.211324865405187, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f0_C2[2][12] = \
    {{0.0, 0.0, 0.0, -0.211324865405187, 0.211324865405187, 0.788675134594813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, -0.788675134594813, 0.788675134594813, 0.211324865405187, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f0_C3[2][12] = \
    {{0.0, 0.0, 0.0, 0.788675134594813, 0.211324865405187, 0.788675134594813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.211324865405187, 0.788675134594813, 0.211324865405187, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f0_C4[2][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.788675134594813, 0.211324865405187, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.211324865405187, 0.788675134594813, 0.0, 0.0, 0.0}};
    
    static const double FE0_f0_C5[2][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.788675134594813, 0.211324865405187},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.211324865405187, 0.788675134594813}};
    
    static const double FE0_f1_C1[2][12] = \
    {{0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f1_C3[2][12] = \
    {{0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f1_C4[2][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.788675134594813, 0.0, 0.211324865405187, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.211324865405187, 0.0, 0.788675134594813, 0.0, 0.0, 0.0}};
    
    static const double FE0_f1_C5[2][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.788675134594813, 0.0, 0.211324865405187},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.211324865405187, 0.0, 0.788675134594813}};
    
    static const double FE0_f2_C0[2][12] = \
    {{0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f2_C1[2][12] = \
    {{0.211324865405187, 0.788675134594813, 0.211324865405187, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.788675134594813, 0.211324865405187, 0.788675134594813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f2_C2[2][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f2_C3[2][12] = \
    {{0.0, 0.0, 0.0, 0.211324865405187, 0.788675134594813, 0.211324865405187, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.788675134594813, 0.211324865405187, 0.788675134594813, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f2_C4[2][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.788675134594813, 0.211324865405187, 0.0, 0.0, 0.0, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.211324865405187, 0.788675134594813, 0.0, 0.0, 0.0, 0.0}};
    
    static const double FE0_f2_C5[2][12] = \
    {{0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.788675134594813, 0.211324865405187, 0.0},
    {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.211324865405187, 0.788675134594813, 0.0}};
    
    // Reset values in the element tensor.
    for (unsigned int r = 0; r < 144; r++)
    {
      A[r] = 0.0;
    }// end loop over 'r'
    
    // Compute element tensor using UFL quadrature representation
    // Optimisations: ('eliminate zeros', False), ('ignore ones', False), ('ignore zero tables', False), ('optimisation', False), ('remove zero terms', False)
    switch (facet)
    {
    case 0:
      {
        // Total number of operations to compute element tensor (from this point): 36288
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 36288
      for (unsigned int ip = 0; ip < 2; ip++)
      {
        
        // Number of operations for primary indices: 18144
        for (unsigned int j = 0; j < 12; j++)
        {
          for (unsigned int k = 0; k < 12; k++)
          {
            // Number of operations to compute entry: 126
            A[j*12 + k] += (FE0_f0_C5[ip][j]*FE0_f0_C5[ip][k]*nan*(-1.0) + (FE0_f0_C5[ip][j]*FE0_f0_C4[ip][k]*nan*(-1.0) + (FE0_f0_C4[ip][j]*FE0_f0_C4[ip][k]*nan*(-1.0) + ((FE0_f0_C4[ip][j]*FE0_f0_C5[ip][k]*nan + (((((((K[1]*FE0_f0_C2[ip][j] + K[3]*FE0_f0_C3[ip][j]))*((-1.0)*n0) + ((K[0]*FE0_f0_C2[ip][j] + K[2]*FE0_f0_C3[ip][j]))*((-1.0)*((-1.0)*n1))))*((((K[1]*FE0_f0_C0[ip][k] + K[3]*FE0_f0_C1[ip][k]))*((-1.0)*n0) + ((K[0]*FE0_f0_C0[ip][k] + K[2]*FE0_f0_C1[ip][k]))*((-1.0)*((-1.0)*n1)))))*nan + (((((K[0]*FE0_f0_C0[ip][j] + K[2]*FE0_f0_C1[ip][j]))*((-1.0)*((-1.0)*n1)) + ((K[1]*FE0_f0_C0[ip][j] + K[3]*FE0_f0_C1[ip][j]))*((-1.0)*n0)))*((((K[1]*FE0_f0_C0[ip][k] + K[3]*FE0_f0_C1[ip][k]))*((-1.0)*n0) + ((K[0]*FE0_f0_C0[ip][k] + K[2]*FE0_f0_C1[ip][k]))*((-1.0)*((-1.0)*n1)))))*nan) + (((((K[1]*FE0_f0_C2[ip][j] + K[3]*FE0_f0_C3[ip][j]))*((-1.0)*n0) + ((K[0]*FE0_f0_C2[ip][j] + K[2]*FE0_f0_C3[ip][j]))*((-1.0)*((-1.0)*n1))))*((((K[0]*FE0_f0_C2[ip][k] + K[2]*FE0_f0_C3[ip][k]))*((-1.0)*((-1.0)*n1)) + ((K[1]*FE0_f0_C2[ip][k] + K[3]*FE0_f0_C3[ip][k]))*((-1.0)*n0))))*nan)) + ((((((K[0]*FE0_f0_C0[ip][j] + K[2]*FE0_f0_C1[ip][j]))*((-1.0)*((-1.0)*n1)) + ((K[1]*FE0_f0_C0[ip][j] + K[3]*FE0_f0_C1[ip][j]))*((-1.0)*n0)))*((((K[0]*FE0_f0_C2[ip][k] + K[2]*FE0_f0_C3[ip][k]))*((-1.0)*((-1.0)*n1)) + ((K[1]*FE0_f0_C2[ip][k] + K[3]*FE0_f0_C3[ip][k]))*((-1.0)*n0))))*nan)*(-1.0)))))*W2[ip]*det;
          }// end loop over 'k'
        }// end loop over 'j'
      }// end loop over 'ip'
        break;
      }
    case 1:
      {
        // Total number of operations to compute element tensor (from this point): 36288
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 36288
      for (unsigned int ip = 0; ip < 2; ip++)
      {
        
        // Number of operations for primary indices: 18144
        for (unsigned int j = 0; j < 12; j++)
        {
          for (unsigned int k = 0; k < 12; k++)
          {
            // Number of operations to compute entry: 126
            A[j*12 + k] += (FE0_f1_C5[ip][j]*FE0_f1_C5[ip][k]*nan*(-1.0) + (FE0_f1_C5[ip][j]*FE0_f1_C4[ip][k]*nan*(-1.0) + (((FE0_f1_C4[ip][j]*FE0_f1_C5[ip][k]*nan + (((((((K[0]*FE0_f0_C2[ip][j] + K[2]*FE0_f1_C3[ip][j]))*((-1.0)*((-1.0)*n1)) + ((K[1]*FE0_f0_C2[ip][j] + K[3]*FE0_f1_C3[ip][j]))*((-1.0)*n0)))*((((K[0]*FE0_f0_C0[ip][k] + K[2]*FE0_f1_C1[ip][k]))*((-1.0)*((-1.0)*n1)) + ((K[1]*FE0_f0_C0[ip][k] + K[3]*FE0_f1_C1[ip][k]))*((-1.0)*n0))))*nan + (((((K[1]*FE0_f0_C0[ip][j] + K[3]*FE0_f1_C1[ip][j]))*((-1.0)*n0) + ((K[0]*FE0_f0_C0[ip][j] + K[2]*FE0_f1_C1[ip][j]))*((-1.0)*((-1.0)*n1))))*((((K[0]*FE0_f0_C0[ip][k] + K[2]*FE0_f1_C1[ip][k]))*((-1.0)*((-1.0)*n1)) + ((K[1]*FE0_f0_C0[ip][k] + K[3]*FE0_f1_C1[ip][k]))*((-1.0)*n0))))*nan) + (((((K[0]*FE0_f0_C2[ip][j] + K[2]*FE0_f1_C3[ip][j]))*((-1.0)*((-1.0)*n1)) + ((K[1]*FE0_f0_C2[ip][j] + K[3]*FE0_f1_C3[ip][j]))*((-1.0)*n0)))*((((K[1]*FE0_f0_C2[ip][k] + K[3]*FE0_f1_C3[ip][k]))*((-1.0)*n0) + ((K[0]*FE0_f0_C2[ip][k] + K[2]*FE0_f1_C3[ip][k]))*((-1.0)*((-1.0)*n1)))))*nan)) + ((((((K[1]*FE0_f0_C0[ip][j] + K[3]*FE0_f1_C1[ip][j]))*((-1.0)*n0) + ((K[0]*FE0_f0_C0[ip][j] + K[2]*FE0_f1_C1[ip][j]))*((-1.0)*((-1.0)*n1))))*((((K[1]*FE0_f0_C2[ip][k] + K[3]*FE0_f1_C3[ip][k]))*((-1.0)*n0) + ((K[0]*FE0_f0_C2[ip][k] + K[2]*FE0_f1_C3[ip][k]))*((-1.0)*((-1.0)*n1)))))*nan)*(-1.0)) + FE0_f1_C4[ip][j]*FE0_f1_C4[ip][k]*nan*(-1.0))))*W2[ip]*det;
          }// end loop over 'k'
        }// end loop over 'j'
      }// end loop over 'ip'
        break;
      }
    case 2:
      {
        // Total number of operations to compute element tensor (from this point): 36288
      
      // Loop quadrature points for integral.
      // Number of operations to compute element tensor for following IP loop = 36288
      for (unsigned int ip = 0; ip < 2; ip++)
      {
        
        // Number of operations for primary indices: 18144
        for (unsigned int j = 0; j < 12; j++)
        {
          for (unsigned int k = 0; k < 12; k++)
          {
            // Number of operations to compute entry: 126
            A[j*12 + k] += (((FE0_f2_C4[ip][j]*FE0_f2_C4[ip][k]*nan*(-1.0) + ((((((((K[0]*FE0_f2_C2[ip][j] + K[2]*FE0_f2_C3[ip][j]))*((-1.0)*((-1.0)*n1)) + ((K[1]*FE0_f2_C2[ip][j] + K[3]*FE0_f2_C3[ip][j]))*((-1.0)*n0)))*((((K[0]*FE0_f2_C2[ip][k] + K[2]*FE0_f2_C3[ip][k]))*((-1.0)*((-1.0)*n1)) + ((K[1]*FE0_f2_C2[ip][k] + K[3]*FE0_f2_C3[ip][k]))*((-1.0)*n0))))*nan + ((((((K[0]*FE0_f2_C0[ip][j] + K[2]*FE0_f2_C1[ip][j]))*((-1.0)*((-1.0)*n1)) + ((K[1]*FE0_f2_C0[ip][j] + K[3]*FE0_f2_C1[ip][j]))*((-1.0)*n0)))*((((K[1]*FE0_f2_C0[ip][k] + K[3]*FE0_f2_C1[ip][k]))*((-1.0)*n0) + ((K[0]*FE0_f2_C0[ip][k] + K[2]*FE0_f2_C1[ip][k]))*((-1.0)*((-1.0)*n1)))))*nan + (((((K[0]*FE0_f2_C2[ip][j] + K[2]*FE0_f2_C3[ip][j]))*((-1.0)*((-1.0)*n1)) + ((K[1]*FE0_f2_C2[ip][j] + K[3]*FE0_f2_C3[ip][j]))*((-1.0)*n0)))*((((K[1]*FE0_f2_C0[ip][k] + K[3]*FE0_f2_C1[ip][k]))*((-1.0)*n0) + ((K[0]*FE0_f2_C0[ip][k] + K[2]*FE0_f2_C1[ip][k]))*((-1.0)*((-1.0)*n1)))))*nan)) + FE0_f2_C4[ip][j]*FE0_f2_C5[ip][k]*nan) + ((((((K[0]*FE0_f2_C0[ip][j] + K[2]*FE0_f2_C1[ip][j]))*((-1.0)*((-1.0)*n1)) + ((K[1]*FE0_f2_C0[ip][j] + K[3]*FE0_f2_C1[ip][j]))*((-1.0)*n0)))*((((K[0]*FE0_f2_C2[ip][k] + K[2]*FE0_f2_C3[ip][k]))*((-1.0)*((-1.0)*n1)) + ((K[1]*FE0_f2_C2[ip][k] + K[3]*FE0_f2_C3[ip][k]))*((-1.0)*n0))))*nan)*(-1.0))) + FE0_f2_C5[ip][j]*FE0_f2_C4[ip][k]*nan*(-1.0)) + FE0_f2_C5[ip][j]*FE0_f2_C5[ip][k]*nan*(-1.0))*W2[ip]*det;
          }// end loop over 'k'
        }// end loop over 'j'
      }// end loop over 'ip'
        break;
      }
    }
    
  }

};

/// This class defines the interface for the assembly of the global
/// tensor corresponding to a form with r + n arguments, that is, a
/// mapping
///
///     a : V1 x V2 x ... Vr x W1 x W2 x ... x Wn -> R
///
/// with arguments v1, v2, ..., vr, w1, w2, ..., wn. The rank r
/// global tensor A is defined by
///
///     A = a(V1, V2, ..., Vr, w1, w2, ..., wn),
///
/// where each argument Vj represents the application to the
/// sequence of basis functions of Vj and w1, w2, ..., wn are given
/// fixed functions (coefficients).

class ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_form_0: public ufc::form
{
public:

  /// Constructor
  ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_form_0() : ufc::form()
  {
    // Do nothing
  }

  /// Destructor
  virtual ~ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_form_0()
  {
    // Do nothing
  }

  /// Return a string identifying the form
  virtual const char* signature() const
  {
    return "881965c736297d62c345870e77b1621f5690f61a69156668b5618163fb419934f9db89cc981454b1b228b621b6ec5ab1aaec3e65dd219c404a4ddf07da736349";
  }

  /// Return the rank of the global tensor (r)
  virtual std::size_t rank() const
  {
    return 2;
  }

  /// Return the number of coefficients (n)
  virtual std::size_t num_coefficients() const
  {
    return 4;
  }

  /// Return the number of cell domains
  virtual std::size_t num_cell_domains() const
  {
    return 1;
  }

  /// Return the number of exterior facet domains
  virtual std::size_t num_exterior_facet_domains() const
  {
    return 1;
  }

  /// Return the number of interior facet domains
  virtual std::size_t num_interior_facet_domains() const
  {
    return 0;
  }

  /// Return the number of point domains
  virtual std::size_t num_point_domains() const
  {
    return 0;
  }

  /// Return whether the form has any cell integrals
  virtual bool has_cell_integrals() const
  {
    return true;
  }

  /// Return whether the form has any exterior facet integrals
  virtual bool has_exterior_facet_integrals() const
  {
    return true;
  }

  /// Return whether the form has any interior facet integrals
  virtual bool has_interior_facet_integrals() const
  {
    return false;
  }

  /// Return whether the form has any point integrals
  virtual bool has_point_integrals() const
  {
    return false;
  }

  /// Create a new finite element for argument function i
  virtual ufc::finite_element* create_finite_element(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_3();
        break;
      }
    case 1:
      {
        return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_3();
        break;
      }
    case 2:
      {
        return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_0();
        break;
      }
    case 3:
      {
        return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_0();
        break;
      }
    case 4:
      {
        return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_0();
        break;
      }
    case 5:
      {
        return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_finite_element_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new dofmap for argument function i
  virtual ufc::dofmap* create_dofmap(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_3();
        break;
      }
    case 1:
      {
        return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_3();
        break;
      }
    case 2:
      {
        return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_0();
        break;
      }
    case 3:
      {
        return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_0();
        break;
      }
    case 4:
      {
        return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_0();
        break;
      }
    case 5:
      {
        return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_dofmap_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new cell integral on sub domain i
  virtual ufc::cell_integral* create_cell_integral(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_cell_integral_0_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new exterior facet integral on sub domain i
  virtual ufc::exterior_facet_integral* create_exterior_facet_integral(std::size_t i) const
  {
    switch (i)
    {
    case 0:
      {
        return new ffc_form_c52dc3dfb8132433ef0c04aeed81e17682ae1984_exterior_facet_integral_0_0();
        break;
      }
    }
    
    return 0;
  }

  /// Create a new interior facet integral on sub domain i
  virtual ufc::interior_facet_integral* create_interior_facet_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new point integral on sub domain i
  virtual ufc::point_integral* create_point_integral(std::size_t i) const
  {
    return 0;
  }

  /// Create a new cell integral on everywhere else
  virtual ufc::cell_integral* create_default_cell_integral() const
  {
    return 0;
  }

  /// Create a new exterior facet integral on everywhere else
  virtual ufc::exterior_facet_integral* create_default_exterior_facet_integral() const
  {
    return 0;
  }

  /// Create a new interior facet integral on everywhere else
  virtual ufc::interior_facet_integral* create_default_interior_facet_integral() const
  {
    return 0;
  }

  /// Create a new point integral on everywhere else
  virtual ufc::point_integral* create_default_point_integral() const
  {
    return 0;
  }

};

#endif
